name: Lint Dockerfile

on: push

env:
  PYTHON_VERSION: 3.7
  DOCKER_IMAGE_NAME: simple_flask_docker:${{ github.ref_name }}-${{ github.sha }}

jobs:
  docker-linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@master
        with:
          dockerfile: "Dockerfile"

  docker-build:
    runs-on: ubuntu-latest
    outputs:
      docker_image_tag: ${{ env.DOCKER_IMAGE_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and export
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: ${{ env.DOCKER_IMAGE_NAME }}
          outputs: type=docker,dest=/tmp/myimage.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: myimage
          path: /tmp/myimage.tar

  docker-testinfra:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - uses: actions/checkout@v2
      # load previously build docker image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: myimage
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/myimage.tar
          docker image ls -a

      # setup python env
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: update pip
        run: |
          python -m pip install -U pip
          pip install -U wheel
          pip install -U setuptools
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies if no cache
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      # docker test
      - name: run test
        run: poetry run pytest --verbose tests/docker -m docker
        env:
          TESTINFRA_DOCKER_IMAGE_NAME: ${{ needs.docker-build.outputs.docker_image_tag }}

  docker-push:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      # load previously build docker image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: myimage
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/myimage.tar
          docker image ls -a

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Login to JFrog
      #   uses: docker/login-action@v1
      #   with:
      #     registry: oltho.jfrog.io
      #     username: ${{ secrets.JFROG_USERNAME }}
      #     password: ${{ secrets.JFROG_ACCESS_TOKEN }}

      - name: GHCR
        run: |
          docker tag ${{ env.DOCKER_IMAGE_NAME }} ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}
          docker push ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}
